
BEGIN_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003260  08003260  00004260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b8  080032b8  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080032b8  080032b8  000042b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c0  080032c0  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c0  080032c0  000042c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080032c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          00012e9c  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f0c  20012f0c  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007179  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac1  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0000dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000607  00000000  00000000  0000e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024031  00000000  00000000  0000eb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a80  00000000  00000000  00032b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8024  00000000  00000000  0003c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001145e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000253c  00000000  00000000  00114628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00116b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003248 	.word	0x08003248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003248 	.word	0x08003248

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa27 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f82d 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f89b 	bl	8000628 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  stt1 = xTaskCreate(TASK1,"Task1",200,"Hello World From Task 1",2,&T1);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <main+0x50>)
 80004fc:	22c8      	movs	r2, #200	@ 0xc8
 80004fe:	490d      	ldr	r1, [pc, #52]	@ (8000534 <main+0x54>)
 8000500:	480d      	ldr	r0, [pc, #52]	@ (8000538 <main+0x58>)
 8000502:	f001 fa12 	bl	800192a <xTaskCreate>
 8000506:	60f8      	str	r0, [r7, #12]
  configASSERT(stt1 = pdPASS);
 8000508:	2301      	movs	r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
  stt2 = xTaskCreate(TASK2,"Task2",200,"Hello World From Task 2",2,&T2);
 800050c:	463b      	mov	r3, r7
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2302      	movs	r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <main+0x5c>)
 8000516:	22c8      	movs	r2, #200	@ 0xc8
 8000518:	4909      	ldr	r1, [pc, #36]	@ (8000540 <main+0x60>)
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <main+0x64>)
 800051c:	f001 fa05 	bl	800192a <xTaskCreate>
 8000520:	60b8      	str	r0, [r7, #8]
  configASSERT(stt2 = pdPASS);
 8000522:	2301      	movs	r3, #1
 8000524:	60bb      	str	r3, [r7, #8]
  vTaskStartScheduler();
 8000526:	f001 fb39 	bl	8001b9c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <main+0x4a>
 800052e:	bf00      	nop
 8000530:	08003260 	.word	0x08003260
 8000534:	08003278 	.word	0x08003278
 8000538:	080006b1 	.word	0x080006b1
 800053c:	08003280 	.word	0x08003280
 8000540:	08003298 	.word	0x08003298
 8000544:	080006d9 	.word	0x080006d9

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fbba 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <SystemClock_Config+0xd8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a2a      	ldr	r2, [pc, #168]	@ (8000620 <SystemClock_Config+0xd8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <SystemClock_Config+0xd8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xdc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <SystemClock_Config+0xdc>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <SystemClock_Config+0xdc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005bc:	23b4      	movs	r3, #180	@ 0xb4
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fd0d 	bl	8000fec <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f892 	bl	8000700 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005dc:	f000 fcb6 	bl	8000f4c <HAL_PWREx_EnableOverDrive>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005e6:	f000 f88b 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ff67 	bl	80014dc <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000614:	f000 f874 	bl	8000700 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	@ 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_GPIO_Init+0x80>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a18      	ldr	r2, [pc, #96]	@ (80006a8 <MX_GPIO_Init+0x80>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_GPIO_Init+0x80>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_GPIO_Init+0x80>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a11      	ldr	r2, [pc, #68]	@ (80006a8 <MX_GPIO_Init+0x80>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_GPIO_Init+0x80>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_GPIO_Init+0x84>)
 800067e:	f000 fc4b 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000682:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0x84>)
 800069c:	f000 fa90 	bl	8000bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40021800 	.word	0x40021800

080006b0 <TASK1>:

/* USER CODE BEGIN 4 */
static void TASK1 (void* parameters)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	while(1)

		{

			printf("%s\n",(char*)parameters);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f002 fa29 	bl	8002b10 <puts>

			taskYIELD();
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <TASK1+0x24>)
 80006c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	f3bf 8f4f 	dsb	sy
 80006ca:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char*)parameters);
 80006ce:	bf00      	nop
 80006d0:	e7f2      	b.n	80006b8 <TASK1+0x8>
 80006d2:	bf00      	nop
 80006d4:	e000ed04 	.word	0xe000ed04

080006d8 <TASK2>:

		}
}
static void TASK2 (void* parameters)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	while(1)

		{

			printf("%s\n",(char*)parameters);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f002 fa15 	bl	8002b10 <puts>

			taskYIELD();
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <TASK2+0x24>)
 80006e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char*)parameters);
 80006f6:	bf00      	nop
 80006f8:	e7f2      	b.n	80006e0 <TASK2+0x8>
 80006fa:	bf00      	nop
 80006fc:	e000ed04 	.word	0xe000ed04

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <HAL_MspInit+0x4c>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000720:	6453      	str	r3, [r2, #68]	@ 0x44
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_MspInit+0x4c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	6413      	str	r3, [r2, #64]	@ 0x40
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <ITM_SendChar+0x48>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ITM_SendChar+0x48>)
 80007a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <ITM_SendChar+0x4c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <ITM_SendChar+0x4c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007b6:	bf00      	nop
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007c6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000edfc 	.word	0xe000edfc
 80007e0:	e0000e00 	.word	0xe0000e00

080007e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e00a      	b.n	800080c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f6:	f3af 8000 	nop.w
 80007fa:	4601      	mov	r1, r0
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	b2ca      	uxtb	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf0      	blt.n	80007f6 <_read+0x12>
  }

  return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e009      	b.n	8000844 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffab 	bl	8000794 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf1      	blt.n	8000830 <_write+0x12>
  }
  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_close>:

int _close(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087e:	605a      	str	r2, [r3, #4]
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <SystemInit+0x20>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SystemInit+0x20>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800091c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e8:	f7ff ffea 	bl	80008c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000912:	f002 fa2b 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000916:	f7ff fde3 	bl	80004e0 <main>
  bx  lr    
 800091a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800091c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000928:	080032c8 	.word	0x080032c8
  ldr r2, =_sbss
 800092c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000930:	20012f0c 	.word	0x20012f0c

08000934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_Init+0x40>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_Init+0x40>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_Init+0x40>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f8f9 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fece 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f903 	bl	8000ba6 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f8d9 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000008c 	.word	0x2000008c

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	@ 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e177      	b.n	8000ecc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8166 	bne.w	8000ec6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80c0 	beq.w	8000ec6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b66      	ldr	r3, [pc, #408]	@ (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a65      	ldr	r2, [pc, #404]	@ (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b63      	ldr	r3, [pc, #396]	@ (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d62:	4a61      	ldr	r2, [pc, #388]	@ (8000ee8 <HAL_GPIO_Init+0x328>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a58      	ldr	r2, [pc, #352]	@ (8000eec <HAL_GPIO_Init+0x32c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d037      	beq.n	8000dfe <HAL_GPIO_Init+0x23e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a57      	ldr	r2, [pc, #348]	@ (8000ef0 <HAL_GPIO_Init+0x330>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d031      	beq.n	8000dfa <HAL_GPIO_Init+0x23a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a56      	ldr	r2, [pc, #344]	@ (8000ef4 <HAL_GPIO_Init+0x334>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d02b      	beq.n	8000df6 <HAL_GPIO_Init+0x236>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a55      	ldr	r2, [pc, #340]	@ (8000ef8 <HAL_GPIO_Init+0x338>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d025      	beq.n	8000df2 <HAL_GPIO_Init+0x232>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a54      	ldr	r2, [pc, #336]	@ (8000efc <HAL_GPIO_Init+0x33c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01f      	beq.n	8000dee <HAL_GPIO_Init+0x22e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a53      	ldr	r2, [pc, #332]	@ (8000f00 <HAL_GPIO_Init+0x340>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x22a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	@ (8000f04 <HAL_GPIO_Init+0x344>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <HAL_GPIO_Init+0x348>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x222>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a50      	ldr	r2, [pc, #320]	@ (8000f0c <HAL_GPIO_Init+0x34c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x21e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_GPIO_Init+0x350>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x21a>
 8000dd6:	2309      	movs	r3, #9
 8000dd8:	e012      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dda:	230a      	movs	r3, #10
 8000ddc:	e010      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dde:	2308      	movs	r3, #8
 8000de0:	e00e      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e00c      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e00a      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dea:	2305      	movs	r3, #5
 8000dec:	e008      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e10:	4935      	ldr	r1, [pc, #212]	@ (8000ee8 <HAL_GPIO_Init+0x328>)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e42:	4a34      	ldr	r2, [pc, #208]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e96:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <HAL_GPIO_Init+0x354>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b0f      	cmp	r3, #15
 8000ed0:	f67f ae84 	bls.w	8000bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40021c00 	.word	0x40021c00
 8000f0c:	40022000 	.word	0x40022000
 8000f10:	40022400 	.word	0x40022400
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_PWREx_EnableOverDrive+0x90>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <HAL_PWREx_EnableOverDrive+0x90>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_PWREx_EnableOverDrive+0x90>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff fd30 	bl	80009dc <HAL_GetTick>
 8000f7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f7e:	e009      	b.n	8000f94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f80:	f7ff fd2c 	bl	80009dc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f8e:	d901      	bls.n	8000f94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e01f      	b.n	8000fd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d1ee      	bne.n	8000f80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa8:	f7ff fd18 	bl	80009dc <HAL_GetTick>
 8000fac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fae:	e009      	b.n	8000fc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fb0:	f7ff fd14 	bl	80009dc <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fbe:	d901      	bls.n	8000fc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e007      	b.n	8000fd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000fd0:	d1ee      	bne.n	8000fb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	420e0040 	.word	0x420e0040
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	420e0044 	.word	0x420e0044

08000fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e267      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d075      	beq.n	80010f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800100a:	4b88      	ldr	r3, [pc, #544]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b04      	cmp	r3, #4
 8001014:	d00c      	beq.n	8001030 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b85      	ldr	r3, [pc, #532]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800101e:	2b08      	cmp	r3, #8
 8001020:	d112      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4b82      	ldr	r3, [pc, #520]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800102a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800102e:	d10b      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d05b      	beq.n	80010f4 <HAL_RCC_OscConfig+0x108>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d157      	bne.n	80010f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e242      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001050:	d106      	bne.n	8001060 <HAL_RCC_OscConfig+0x74>
 8001052:	4b76      	ldr	r3, [pc, #472]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a75      	ldr	r2, [pc, #468]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x98>
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6f      	ldr	r2, [pc, #444]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6d      	ldr	r3, [pc, #436]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6c      	ldr	r2, [pc, #432]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001084:	4b69      	ldr	r3, [pc, #420]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a68      	ldr	r2, [pc, #416]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b66      	ldr	r3, [pc, #408]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a65      	ldr	r2, [pc, #404]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc9a 	bl	80009dc <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc96 	bl	80009dc <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	@ 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e207      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xc0>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc86 	bl	80009dc <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fc82 	bl	80009dc <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1f3      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b51      	ldr	r3, [pc, #324]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0xe8>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001102:	4b4a      	ldr	r3, [pc, #296]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	4b47      	ldr	r3, [pc, #284]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b44      	ldr	r3, [pc, #272]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b41      	ldr	r3, [pc, #260]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1c7      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4937      	ldr	r1, [pc, #220]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <HAL_RCC_OscConfig+0x244>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fc3b 	bl	80009dc <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fc37 	bl	80009dc <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1a8      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4925      	ldr	r1, [pc, #148]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <HAL_RCC_OscConfig+0x244>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc1a 	bl	80009dc <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc16 	bl	80009dc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e187      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d036      	beq.n	8001244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_RCC_OscConfig+0x248>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fbfa 	bl	80009dc <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fbf6 	bl	80009dc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e167      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_RCC_OscConfig+0x240>)
 8001200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x200>
 800120a:	e01b      	b.n	8001244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_RCC_OscConfig+0x248>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fbe3 	bl	80009dc <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	e00e      	b.n	8001238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fbdf 	bl	80009dc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d907      	bls.n	8001238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e150      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000
 8001234:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b88      	ldr	r3, [pc, #544]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ea      	bne.n	800121a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8097 	beq.w	8001380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b81      	ldr	r3, [pc, #516]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b7d      	ldr	r3, [pc, #500]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	4a7c      	ldr	r2, [pc, #496]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	4b7a      	ldr	r3, [pc, #488]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b77      	ldr	r3, [pc, #476]	@ (8001460 <HAL_RCC_OscConfig+0x474>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b74      	ldr	r3, [pc, #464]	@ (8001460 <HAL_RCC_OscConfig+0x474>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a73      	ldr	r2, [pc, #460]	@ (8001460 <HAL_RCC_OscConfig+0x474>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb9f 	bl	80009dc <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7ff fb9b 	bl	80009dc <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e10c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001460 <HAL_RCC_OscConfig+0x474>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2ea>
 80012c8:	4b64      	ldr	r3, [pc, #400]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012cc:	4a63      	ldr	r2, [pc, #396]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80012d4:	e01c      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x30c>
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e2:	4a5e      	ldr	r2, [pc, #376]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ee:	4a5b      	ldr	r2, [pc, #364]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012f8:	4b58      	ldr	r3, [pc, #352]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fc:	4a57      	ldr	r2, [pc, #348]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	@ 0x70
 8001304:	4b55      	ldr	r3, [pc, #340]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001308:	4a54      	ldr	r2, [pc, #336]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 0304 	bic.w	r3, r3, #4
 800130e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d015      	beq.n	8001344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fb60 	bl	80009dc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fb5c 	bl	80009dc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0cb      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ee      	beq.n	8001320 <HAL_RCC_OscConfig+0x334>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fb4a 	bl	80009dc <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fb46 	bl	80009dc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0b5      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ee      	bne.n	800134c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a1 	beq.w	80014cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138a:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d05c      	beq.n	8001450 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d141      	bne.n	8001422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b31      	ldr	r3, [pc, #196]	@ (8001464 <HAL_RCC_OscConfig+0x478>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb1a 	bl	80009dc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb16 	bl	80009dc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e087      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b27      	ldr	r3, [pc, #156]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	019b      	lsls	r3, r3, #6
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	3b01      	subs	r3, #1
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	491b      	ldr	r1, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_RCC_OscConfig+0x478>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff faef 	bl	80009dc <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff faeb 	bl	80009dc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e05c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x416>
 8001420:	e054      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fad8 	bl	80009dc <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fad4 	bl	80009dc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e045      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x444>
 800144e:	e03d      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e038      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000
 8001464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x4ec>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d028      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d121      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d11a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800149e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cc      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b68      	ldr	r3, [pc, #416]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d90c      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b65      	ldr	r3, [pc, #404]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a58      	ldr	r2, [pc, #352]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a52      	ldr	r2, [pc, #328]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d044      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e067      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4934      	ldr	r1, [pc, #208]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fa06 	bl	80009dc <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff fa02 	bl	80009dc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d20c      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f821 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490a      	ldr	r1, [pc, #40]	@ (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f97a 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	080032a8 	.word	0x080032a8
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b090      	sub	sp, #64	@ 0x40
 80016ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c0:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d00d      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x40>
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	f200 80a1 	bhi.w	8001814 <HAL_RCC_GetSysClockFreq+0x16c>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x34>
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016da:	e09b      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b53      	ldr	r3, [pc, #332]	@ (800182c <HAL_RCC_GetSysClockFreq+0x184>)
 80016de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e0:	e09b      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016e2:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e6:	e098      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d028      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	099b      	lsrs	r3, r3, #6
 8001704:	2200      	movs	r2, #0
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	627a      	str	r2, [r7, #36]	@ 0x24
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001710:	2100      	movs	r1, #0
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 8001714:	fb03 f201 	mul.w	r2, r3, r1
 8001718:	2300      	movs	r3, #0
 800171a:	fb00 f303 	mul.w	r3, r0, r3
 800171e:	4413      	add	r3, r2
 8001720:	4a43      	ldr	r2, [pc, #268]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 8001722:	fba0 1202 	umull	r1, r2, r0, r2
 8001726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001728:	460a      	mov	r2, r1
 800172a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800172c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800172e:	4413      	add	r3, r2
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001734:	2200      	movs	r2, #0
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	61fa      	str	r2, [r7, #28]
 800173a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800173e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001742:	f7fe fd55 	bl	80001f0 <__aeabi_uldivmod>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4613      	mov	r3, r2
 800174c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800174e:	e053      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	617a      	str	r2, [r7, #20]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001762:	f04f 0b00 	mov.w	fp, #0
 8001766:	4652      	mov	r2, sl
 8001768:	465b      	mov	r3, fp
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ebb2 080a 	subs.w	r8, r2, sl
 8001782:	eb63 090b 	sbc.w	r9, r3, fp
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001792:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001796:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800179a:	ebb2 0408 	subs.w	r4, r2, r8
 800179e:	eb63 0509 	sbc.w	r5, r3, r9
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	00eb      	lsls	r3, r5, #3
 80017ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b0:	00e2      	lsls	r2, r4, #3
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	eb14 030a 	adds.w	r3, r4, sl
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	eb45 030b 	adc.w	r3, r5, fp
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ce:	4629      	mov	r1, r5
 80017d0:	028b      	lsls	r3, r1, #10
 80017d2:	4621      	mov	r1, r4
 80017d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d8:	4621      	mov	r1, r4
 80017da:	028a      	lsls	r2, r1, #10
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e2:	2200      	movs	r2, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	60fa      	str	r2, [r7, #12]
 80017e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ec:	f7fe fd00 	bl	80001f0 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	3301      	adds	r3, #1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800180a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001812:	e002      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800181c:	4618      	mov	r0, r3
 800181e:	3740      	adds	r7, #64	@ 0x40
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400
 8001830:	017d7840 	.word	0x017d7840

08001834 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f103 0208 	add.w	r2, r3, #8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f103 0208 	add.w	r2, r3, #8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f103 0208 	add.w	r2, r3, #8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800188e:	b480      	push	{r7}
 8001890:	b085      	sub	sp, #20
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6892      	ldr	r2, [r2, #8]
 80018ec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6852      	ldr	r2, [r2, #4]
 80018f6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d103      	bne.n	800190a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800192a:	b580      	push	{r7, lr}
 800192c:	b08c      	sub	sp, #48	@ 0x30
 800192e:	af04      	add	r7, sp, #16
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fdcc 	bl	80024dc <pvPortMalloc>
 8001944:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800194c:	2058      	movs	r0, #88	@ 0x58
 800194e:	f000 fdc5 	bl	80024dc <pvPortMalloc>
 8001952:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001960:	e005      	b.n	800196e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f000 fe9c 	bl	80026a0 <vPortFree>
 8001968:	e001      	b.n	800196e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	2300      	movs	r3, #0
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f80e 	bl	80019ac <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001990:	69f8      	ldr	r0, [r7, #28]
 8001992:	f000 f8a3 	bl	8001adc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	e002      	b.n	80019a2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019a2:	69bb      	ldr	r3, [r7, #24]
    }
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	21a5      	movs	r1, #165	@ 0xa5
 80019c6:	f001 f983 	bl	8002cd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019d4:	3b01      	subs	r3, #1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f023 0307 	bic.w	r3, r3, #7
 80019e2:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80019ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01f      	beq.n	8001a4c <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e012      	b.n	8001a38 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3334      	adds	r3, #52	@ 0x34
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d9e9      	bls.n	8001a12 <prvInitialiseNewTask+0x66>
 8001a3e:	e000      	b.n	8001a42 <prvInitialiseNewTask+0x96>
            {
                break;
 8001a40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001a4a:	e003      	b.n	8001a54 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d901      	bls.n	8001a5e <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a68:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	3304      	adds	r3, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fefd 	bl	8001874 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fef8 	bl	8001874 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8c:	f1c3 0205 	rsb	r2, r3, #5
 8001a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	3350      	adds	r3, #80	@ 0x50
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f914 	bl	8002cd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aaa:	3354      	adds	r3, #84	@ 0x54
 8001aac:	2201      	movs	r2, #1
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 f90d 	bl	8002cd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	69b8      	ldr	r0, [r7, #24]
 8001abc:	f000 faf6 	bl	80020ac <pxPortInitialiseStack>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ae4:	f000 fc12 	bl	800230c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	@ (8001b84 <prvAddNewTaskToReadyList+0xa8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	4a25      	ldr	r2, [pc, #148]	@ (8001b84 <prvAddNewTaskToReadyList+0xa8>)
 8001af0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001af2:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <prvAddNewTaskToReadyList+0xac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <prvAddNewTaskToReadyList+0xac>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <prvAddNewTaskToReadyList+0xa8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d110      	bne.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b08:	f000 fa36 	bl	8001f78 <prvInitialiseTaskLists>
 8001b0c:	e00d      	b.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <prvAddNewTaskToReadyList+0xb0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <prvAddNewTaskToReadyList+0xac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d802      	bhi.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <prvAddNewTaskToReadyList+0xac>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <prvAddNewTaskToReadyList+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <prvAddNewTaskToReadyList+0xb4>)
 8001b32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <prvAddNewTaskToReadyList+0xb4>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	2201      	movs	r2, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <prvAddNewTaskToReadyList+0xb8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <prvAddNewTaskToReadyList+0xb8>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <prvAddNewTaskToReadyList+0xbc>)
 8001b5c:	441a      	add	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f7ff fe92 	bl	800188e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b6a:	f000 fc01 	bl	8002370 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <prvAddNewTaskToReadyList+0xb0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b76:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <prvAddNewTaskToReadyList+0xac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000168 	.word	0x20000168
 8001b88:	20000090 	.word	0x20000090
 8001b8c:	20000174 	.word	0x20000174
 8001b90:	20000184 	.word	0x20000184
 8001b94:	20000170 	.word	0x20000170
 8001b98:	20000094 	.word	0x20000094

08001b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <vTaskStartScheduler+0x7c>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	2282      	movs	r2, #130	@ 0x82
 8001bae:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <vTaskStartScheduler+0x80>)
 8001bb0:	481b      	ldr	r0, [pc, #108]	@ (8001c20 <vTaskStartScheduler+0x84>)
 8001bb2:	f7ff feba 	bl	800192a <xTaskCreate>
 8001bb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d116      	bne.n	8001bec <vTaskStartScheduler+0x50>
        __asm volatile
 8001bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	60bb      	str	r3, [r7, #8]
    }
 8001bd0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <vTaskStartScheduler+0x88>)
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <vTaskStartScheduler+0x8c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <vTaskStartScheduler+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001be6:	f000 faed 	bl	80021c4 <xPortStartScheduler>
 8001bea:	e00f      	b.n	8001c0c <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d10b      	bne.n	8001c0c <vTaskStartScheduler+0x70>
        __asm volatile
 8001bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	607b      	str	r3, [r7, #4]
    }
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <vTaskStartScheduler+0x94>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000018c 	.word	0x2000018c
 8001c1c:	080032a0 	.word	0x080032a0
 8001c20:	08001f55 	.word	0x08001f55
 8001c24:	20000188 	.word	0x20000188
 8001c28:	20000174 	.word	0x20000174
 8001c2c:	2000016c 	.word	0x2000016c
 8001c30:	2000000c 	.word	0x2000000c

08001c34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <vTaskSuspendAll+0x18>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a03      	ldr	r2, [pc, #12]	@ (8001c4c <vTaskSuspendAll+0x18>)
 8001c40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000190 	.word	0x20000190

08001c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d50 <xTaskResumeAll+0x100>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <xTaskResumeAll+0x2e>
        __asm volatile
 8001c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	603b      	str	r3, [r7, #0]
    }
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	e7fd      	b.n	8001c7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001c7e:	f000 fb45 	bl	800230c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001c82:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <xTaskResumeAll+0x100>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a31      	ldr	r2, [pc, #196]	@ (8001d50 <xTaskResumeAll+0x100>)
 8001c8a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c8c:	4b30      	ldr	r3, [pc, #192]	@ (8001d50 <xTaskResumeAll+0x100>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d155      	bne.n	8001d40 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <xTaskResumeAll+0x104>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d051      	beq.n	8001d40 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c9c:	e02e      	b.n	8001cfc <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <xTaskResumeAll+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3318      	adds	r3, #24
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fe13 	bl	80018d6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe0e 	bl	80018d6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <xTaskResumeAll+0x10c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <xTaskResumeAll+0x10c>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4a21      	ldr	r2, [pc, #132]	@ (8001d60 <xTaskResumeAll+0x110>)
 8001cda:	441a      	add	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7ff fdd3 	bl	800188e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <xTaskResumeAll+0x114>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d302      	bcc.n	8001cfc <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <xTaskResumeAll+0x118>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cfc:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <xTaskResumeAll+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1cc      	bne.n	8001c9e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d0a:	f000 f9b3 	bl	8002074 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <xTaskResumeAll+0x11c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001d1a:	f000 f829 	bl	8001d70 <xTaskIncrementTick>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <xTaskResumeAll+0x118>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f1      	bne.n	8001d1a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <xTaskResumeAll+0x11c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <xTaskResumeAll+0x118>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d40:	f000 fb16 	bl	8002370 <vPortExitCritical>

    return xAlreadyYielded;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000190 	.word	0x20000190
 8001d54:	20000168 	.word	0x20000168
 8001d58:	20000128 	.word	0x20000128
 8001d5c:	20000170 	.word	0x20000170
 8001d60:	20000094 	.word	0x20000094
 8001d64:	20000090 	.word	0x20000090
 8001d68:	2000017c 	.word	0x2000017c
 8001d6c:	20000178 	.word	0x20000178

08001d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e78 <xTaskIncrementTick+0x108>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d170      	bne.n	8001e64 <xTaskIncrementTick+0xf4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d82:	4b3e      	ldr	r3, [pc, #248]	@ (8001e7c <xTaskIncrementTick+0x10c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e7c <xTaskIncrementTick+0x10c>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001d96:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <xTaskIncrementTick+0x110>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <xTaskIncrementTick+0x48>
        __asm volatile
 8001da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	603b      	str	r3, [r7, #0]
    }
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <xTaskIncrementTick+0x44>
 8001db8:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <xTaskIncrementTick+0x110>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <xTaskIncrementTick+0x114>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <xTaskIncrementTick+0x110>)
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e84 <xTaskIncrementTick+0x114>)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <xTaskIncrementTick+0x118>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e88 <xTaskIncrementTick+0x118>)
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	f000 f94d 	bl	8002074 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001dda:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <xTaskIncrementTick+0x11c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d344      	bcc.n	8001e6e <xTaskIncrementTick+0xfe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001de4:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <xTaskIncrementTick+0x110>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d104      	bne.n	8001df8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <xTaskIncrementTick+0x11c>)
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	601a      	str	r2, [r3, #0]
                    break;
 8001df6:	e03a      	b.n	8001e6e <xTaskIncrementTick+0xfe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <xTaskIncrementTick+0x110>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d203      	bcs.n	8001e18 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e10:	4a1e      	ldr	r2, [pc, #120]	@ (8001e8c <xTaskIncrementTick+0x11c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e16:	e02a      	b.n	8001e6e <xTaskIncrementTick+0xfe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd5a 	bl	80018d6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fd51 	bl	80018d6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <xTaskIncrementTick+0x120>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	4a13      	ldr	r2, [pc, #76]	@ (8001e90 <xTaskIncrementTick+0x120>)
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <xTaskIncrementTick+0x124>)
 8001e54:	441a      	add	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7ff fd16 	bl	800188e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e62:	e7bf      	b.n	8001de4 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <xTaskIncrementTick+0x128>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <xTaskIncrementTick+0x128>)
 8001e6c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001e6e:	697b      	ldr	r3, [r7, #20]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000190 	.word	0x20000190
 8001e7c:	2000016c 	.word	0x2000016c
 8001e80:	20000120 	.word	0x20000120
 8001e84:	20000124 	.word	0x20000124
 8001e88:	20000180 	.word	0x20000180
 8001e8c:	20000188 	.word	0x20000188
 8001e90:	20000170 	.word	0x20000170
 8001e94:	20000094 	.word	0x20000094
 8001e98:	20000178 	.word	0x20000178

08001e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ea2:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <vTaskSwitchContext+0xa4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <vTaskSwitchContext+0xa8>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001eb0:	e040      	b.n	8001f34 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <vTaskSwitchContext+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb8:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <vTaskSwitchContext+0xac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	f1c3 031f 	rsb	r3, r3, #31
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	491f      	ldr	r1, [pc, #124]	@ (8001f4c <vTaskSwitchContext+0xb0>)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <vTaskSwitchContext+0x5e>
        __asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	607b      	str	r3, [r7, #4]
    }
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <vTaskSwitchContext+0x5a>
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4a11      	ldr	r2, [pc, #68]	@ (8001f4c <vTaskSwitchContext+0xb0>)
 8001f06:	4413      	add	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d104      	bne.n	8001f2a <vTaskSwitchContext+0x8e>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <vTaskSwitchContext+0xb4>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000190 	.word	0x20000190
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	20000170 	.word	0x20000170
 8001f4c:	20000094 	.word	0x20000094
 8001f50:	20000090 	.word	0x20000090

08001f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f5c:	f000 f84c 	bl	8001ff8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <prvIdleTask+0x20>)
 8001f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001f70:	bf00      	nop
 8001f72:	e7f3      	b.n	8001f5c <prvIdleTask+0x8>
 8001f74:	e000ed04 	.word	0xe000ed04

08001f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	e00c      	b.n	8001f9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <prvInitialiseTaskLists+0x60>)
 8001f90:	4413      	add	r3, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc4e 	bl	8001834 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d9ef      	bls.n	8001f84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <prvInitialiseTaskLists+0x64>)
 8001fa6:	f7ff fc45 	bl	8001834 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <prvInitialiseTaskLists+0x68>)
 8001fac:	f7ff fc42 	bl	8001834 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001fb0:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <prvInitialiseTaskLists+0x6c>)
 8001fb2:	f7ff fc3f 	bl	8001834 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001fb6:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <prvInitialiseTaskLists+0x70>)
 8001fb8:	f7ff fc3c 	bl	8001834 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001fbc:	480b      	ldr	r0, [pc, #44]	@ (8001fec <prvInitialiseTaskLists+0x74>)
 8001fbe:	f7ff fc39 	bl	8001834 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <prvInitialiseTaskLists+0x78>)
 8001fc4:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <prvInitialiseTaskLists+0x64>)
 8001fc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <prvInitialiseTaskLists+0x7c>)
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <prvInitialiseTaskLists+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000094 	.word	0x20000094
 8001fdc:	200000f8 	.word	0x200000f8
 8001fe0:	2000010c 	.word	0x2000010c
 8001fe4:	20000128 	.word	0x20000128
 8001fe8:	2000013c 	.word	0x2000013c
 8001fec:	20000154 	.word	0x20000154
 8001ff0:	20000120 	.word	0x20000120
 8001ff4:	20000124 	.word	0x20000124

08001ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ffe:	e019      	b.n	8002034 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002000:	f000 f984 	bl	800230c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <prvCheckTasksWaitingTermination+0x50>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fc60 	bl	80018d6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <prvCheckTasksWaitingTermination+0x54>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <prvCheckTasksWaitingTermination+0x54>)
 800201e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <prvCheckTasksWaitingTermination+0x58>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <prvCheckTasksWaitingTermination+0x58>)
 8002028:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800202a:	f000 f9a1 	bl	8002370 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f810 	bl	8002054 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <prvCheckTasksWaitingTermination+0x58>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e1      	bne.n	8002000 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000013c 	.word	0x2000013c
 800204c:	20000168 	.word	0x20000168
 8002050:	20000150 	.word	0x20000150

08002054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fb1d 	bl	80026a0 <vPortFree>
                vPortFree( pxTCB );
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fb1a 	bl	80026a0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <prvResetNextTaskUnblockTime+0x30>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <prvResetNextTaskUnblockTime+0x34>)
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800208a:	e005      	b.n	8002098 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <prvResetNextTaskUnblockTime+0x30>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <prvResetNextTaskUnblockTime+0x34>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000120 	.word	0x20000120
 80020a8:	20000188 	.word	0x20000188

080020ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b04      	subs	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b04      	subs	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f023 0201 	bic.w	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3b04      	subs	r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80020dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <pxPortInitialiseStack+0x64>)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b14      	subs	r3, #20
 80020e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3b04      	subs	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f06f 0202 	mvn.w	r2, #2
 80020fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3b20      	subs	r3, #32
 8002100:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	08002115 	.word	0x08002115

08002114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <prvTaskExitError+0x58>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d00b      	beq.n	8002140 <prvTaskExitError+0x2c>
        __asm volatile
 8002128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60fb      	str	r3, [r7, #12]
    }
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <prvTaskExitError+0x28>
        __asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	60bb      	str	r3, [r7, #8]
    }
 8002152:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002154:	bf00      	nop
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0fc      	beq.n	8002156 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000010 	.word	0x20000010

08002170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002170:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <pxCurrentTCBConst2>)
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	6808      	ldr	r0, [r1, #0]
 8002176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217a:	f380 8809 	msr	PSP, r0
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f380 8811 	msr	BASEPRI, r0
 800218a:	4770      	bx	lr
 800218c:	f3af 8000 	nop.w

08002190 <pxCurrentTCBConst2>:
 8002190:	20000090 	.word	0x20000090
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop

08002198 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002198:	4808      	ldr	r0, [pc, #32]	@ (80021bc <prvPortStartFirstTask+0x24>)
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	6800      	ldr	r0, [r0, #0]
 800219e:	f380 8808 	msr	MSP, r0
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f380 8814 	msr	CONTROL, r0
 80021aa:	b662      	cpsie	i
 80021ac:	b661      	cpsie	f
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	df00      	svc	0
 80021b8:	bf00      	nop
 80021ba:	0000      	.short	0x0000
 80021bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop

080021c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <xPortStartScheduler+0x124>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a47      	ldr	r2, [pc, #284]	@ (80022ec <xPortStartScheduler+0x128>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10b      	bne.n	80021ec <xPortStartScheduler+0x28>
        __asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	613b      	str	r3, [r7, #16]
    }
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021ec:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <xPortStartScheduler+0x124>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3f      	ldr	r2, [pc, #252]	@ (80022f0 <xPortStartScheduler+0x12c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <xPortStartScheduler+0x4a>
        __asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	60fb      	str	r3, [r7, #12]
    }
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <xPortStartScheduler+0x130>)
 8002210:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	22ff      	movs	r2, #255	@ 0xff
 800221e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <xPortStartScheduler+0x134>)
 8002234:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002236:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <xPortStartScheduler+0x138>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800223c:	e009      	b.n	8002252 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <xPortStartScheduler+0x138>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	4a2d      	ldr	r2, [pc, #180]	@ (80022fc <xPortStartScheduler+0x138>)
 8002246:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225a:	2b80      	cmp	r3, #128	@ 0x80
 800225c:	d0ef      	beq.n	800223e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <xPortStartScheduler+0x138>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	d00b      	beq.n	8002282 <xPortStartScheduler+0xbe>
        __asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	60bb      	str	r3, [r7, #8]
    }
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	e7fd      	b.n	800227e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <xPortStartScheduler+0x138>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	4a1c      	ldr	r2, [pc, #112]	@ (80022fc <xPortStartScheduler+0x138>)
 800228a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <xPortStartScheduler+0x138>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <xPortStartScheduler+0x138>)
 8002296:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <xPortStartScheduler+0x13c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a16      	ldr	r2, [pc, #88]	@ (8002300 <xPortStartScheduler+0x13c>)
 80022a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <xPortStartScheduler+0x13c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a13      	ldr	r2, [pc, #76]	@ (8002300 <xPortStartScheduler+0x13c>)
 80022b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80022b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80022b8:	f000 f8e0 	bl	800247c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <xPortStartScheduler+0x140>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80022c2:	f000 f8ff 	bl	80024c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <xPortStartScheduler+0x144>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002308 <xPortStartScheduler+0x144>)
 80022cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80022d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80022d2:	f7ff ff61 	bl	8002198 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80022d6:	f7ff fde1 	bl	8001e9c <vTaskSwitchContext>
    prvTaskExitError();
 80022da:	f7ff ff1b 	bl	8002114 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	410fc271 	.word	0x410fc271
 80022f0:	410fc270 	.word	0x410fc270
 80022f4:	e000e400 	.word	0xe000e400
 80022f8:	20000194 	.word	0x20000194
 80022fc:	20000198 	.word	0x20000198
 8002300:	e000ed20 	.word	0xe000ed20
 8002304:	20000010 	.word	0x20000010
 8002308:	e000ef34 	.word	0xe000ef34

0800230c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
        __asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	607b      	str	r3, [r7, #4]
    }
 8002324:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <vPortEnterCritical+0x5c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a0e      	ldr	r2, [pc, #56]	@ (8002368 <vPortEnterCritical+0x5c>)
 800232e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <vPortEnterCritical+0x5c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d110      	bne.n	800235a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <vPortEnterCritical+0x60>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <vPortEnterCritical+0x4e>
        __asm volatile
 8002342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	603b      	str	r3, [r7, #0]
    }
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	e7fd      	b.n	8002356 <vPortEnterCritical+0x4a>
    }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000010 	.word	0x20000010
 800236c:	e000ed04 	.word	0xe000ed04

08002370 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <vPortExitCritical+0x50>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <vPortExitCritical+0x26>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	607b      	str	r3, [r7, #4]
    }
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <vPortExitCritical+0x50>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3b01      	subs	r3, #1
 800239c:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <vPortExitCritical+0x50>)
 800239e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <vPortExitCritical+0x50>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d105      	bne.n	80023b4 <vPortExitCritical+0x44>
 80023a8:	2300      	movs	r3, #0
 80023aa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80023b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	20000010 	.word	0x20000010
	...

080023d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80023d0:	f3ef 8009 	mrs	r0, PSP
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <pxCurrentTCBConst>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f01e 0f10 	tst.w	lr, #16
 80023e0:	bf08      	it	eq
 80023e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80023e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ea:	6010      	str	r0, [r2, #0]
 80023ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80023f4:	f380 8811 	msr	BASEPRI, r0
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f7ff fd4c 	bl	8001e9c <vTaskSwitchContext>
 8002404:	f04f 0000 	mov.w	r0, #0
 8002408:	f380 8811 	msr	BASEPRI, r0
 800240c:	bc09      	pop	{r0, r3}
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	6808      	ldr	r0, [r1, #0]
 8002412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002416:	f01e 0f10 	tst.w	lr, #16
 800241a:	bf08      	it	eq
 800241c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002420:	f380 8809 	msr	PSP, r0
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	f3af 8000 	nop.w

08002430 <pxCurrentTCBConst>:
 8002430:	20000090 	.word	0x20000090
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop

08002438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
        __asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	607b      	str	r3, [r7, #4]
    }
 8002450:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002452:	f7ff fc8d 	bl	8001d70 <xTaskIncrementTick>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <SysTick_Handler+0x40>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f383 8811 	msr	BASEPRI, r3
    }
 800246e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <vPortSetupTimerInterrupt+0x34>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <vPortSetupTimerInterrupt+0x38>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800248c:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <vPortSetupTimerInterrupt+0x3c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <vPortSetupTimerInterrupt+0x40>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <vPortSetupTimerInterrupt+0x44>)
 800249a:	3b01      	subs	r3, #1
 800249c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <vPortSetupTimerInterrupt+0x34>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010
 80024b4:	e000e018 	.word	0xe000e018
 80024b8:	20000000 	.word	0x20000000
 80024bc:	10624dd3 	.word	0x10624dd3
 80024c0:	e000e014 	.word	0xe000e014

080024c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80024c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80024d4 <vPortEnableVFP+0x10>
 80024c8:	6801      	ldr	r1, [r0, #0]
 80024ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80024ce:	6001      	str	r1, [r0, #0]
 80024d0:	4770      	bx	lr
 80024d2:	0000      	.short	0x0000
 80024d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop

080024dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80024e8:	f7ff fba4 	bl	8001c34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <pvPortMalloc+0x1ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024f4:	f000 f938 	bl	8002768 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024f8:	4b64      	ldr	r3, [pc, #400]	@ (800268c <pvPortMalloc+0x1b0>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 80a9 	bne.w	8002658 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02e      	beq.n	800256a <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800250c:	2208      	movs	r2, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d228      	bcs.n	800256a <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8002518:	2208      	movs	r2, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	2b00      	cmp	r3, #0
 8002528:	d022      	beq.n	8002570 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	3308      	adds	r3, #8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d215      	bcs.n	8002564 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	3308      	adds	r3, #8
 8002540:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <pvPortMalloc+0x94>
        __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	617b      	str	r3, [r7, #20]
    }
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002568:	e002      	b.n	8002570 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	e000      	b.n	8002572 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002570:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d06f      	beq.n	8002658 <pvPortMalloc+0x17c>
 8002578:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <pvPortMalloc+0x1b4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d86a      	bhi.n	8002658 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <pvPortMalloc+0x1b8>)
 8002584:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002586:	4b43      	ldr	r3, [pc, #268]	@ (8002694 <pvPortMalloc+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800258c:	e004      	b.n	8002598 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d903      	bls.n	80025aa <pvPortMalloc+0xce>
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f1      	bne.n	800258e <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80025aa:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <pvPortMalloc+0x1ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d051      	beq.n	8002658 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4413      	add	r3, r2
 80025bc:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1ad2      	subs	r2, r2, r3
 80025ce:	2308      	movs	r3, #8
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d920      	bls.n	8002618 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <pvPortMalloc+0x124>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	613b      	str	r3, [r7, #16]
    }
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	f000 f90a 	bl	800282c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002618:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <pvPortMalloc+0x1b4>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <pvPortMalloc+0x1b4>)
 8002624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <pvPortMalloc+0x1b4>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <pvPortMalloc+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d203      	bcs.n	800263a <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <pvPortMalloc+0x1b4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <pvPortMalloc+0x1bc>)
 8002638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b13      	ldr	r3, [pc, #76]	@ (800268c <pvPortMalloc+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	431a      	orrs	r2, r3
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800264e:	4b13      	ldr	r3, [pc, #76]	@ (800269c <pvPortMalloc+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	4a11      	ldr	r2, [pc, #68]	@ (800269c <pvPortMalloc+0x1c0>)
 8002656:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002658:	f7ff fafa 	bl	8001c50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <pvPortMalloc+0x1a2>
        __asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	60fb      	str	r3, [r7, #12]
    }
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	e7fd      	b.n	800267a <pvPortMalloc+0x19e>
    return pvReturn;
 800267e:	69fb      	ldr	r3, [r7, #28]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	@ 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20012da4 	.word	0x20012da4
 800268c:	20012db8 	.word	0x20012db8
 8002690:	20012da8 	.word	0x20012da8
 8002694:	20012d9c 	.word	0x20012d9c
 8002698:	20012dac 	.word	0x20012dac
 800269c:	20012db0 	.word	0x20012db0

080026a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d04f      	beq.n	8002752 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80026b2:	2308      	movs	r3, #8
 80026b4:	425b      	negs	r3, r3
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4b25      	ldr	r3, [pc, #148]	@ (800275c <vPortFree+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <vPortFree+0x46>
        __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	60fb      	str	r3, [r7, #12]
    }
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	e7fd      	b.n	80026e2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <vPortFree+0x66>
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	60bb      	str	r3, [r7, #8]
    }
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	e7fd      	b.n	8002702 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <vPortFree+0xbc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01e      	beq.n	8002752 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11a      	bne.n	8002752 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <vPortFree+0xbc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800272c:	f7ff fa82 	bl	8001c34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <vPortFree+0xc0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4413      	add	r3, r2
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <vPortFree+0xc0>)
 800273c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800273e:	6938      	ldr	r0, [r7, #16]
 8002740:	f000 f874 	bl	800282c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002744:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <vPortFree+0xc4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a06      	ldr	r2, [pc, #24]	@ (8002764 <vPortFree+0xc4>)
 800274c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800274e:	f7ff fa7f 	bl	8001c50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20012db8 	.word	0x20012db8
 8002760:	20012da8 	.word	0x20012da8
 8002764:	20012db4 	.word	0x20012db4

08002768 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800276e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002772:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002774:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <prvHeapInit+0xac>)
 8002776:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3307      	adds	r3, #7
 8002786:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	4a1f      	ldr	r2, [pc, #124]	@ (8002814 <prvHeapInit+0xac>)
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <prvHeapInit+0xb0>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <prvHeapInit+0xb0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80027b4:	2208      	movs	r2, #8
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <prvHeapInit+0xb4>)
 80027c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <prvHeapInit+0xb4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <prvHeapInit+0xb4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <prvHeapInit+0xb4>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <prvHeapInit+0xb8>)
 80027f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <prvHeapInit+0xbc>)
 80027fe:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <prvHeapInit+0xc0>)
 8002802:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	2000019c 	.word	0x2000019c
 8002818:	20012d9c 	.word	0x20012d9c
 800281c:	20012da4 	.word	0x20012da4
 8002820:	20012dac 	.word	0x20012dac
 8002824:	20012da8 	.word	0x20012da8
 8002828:	20012db8 	.word	0x20012db8

0800282c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002834:	4b28      	ldr	r3, [pc, #160]	@ (80028d8 <prvInsertBlockIntoFreeList+0xac>)
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e002      	b.n	8002840 <prvInsertBlockIntoFreeList+0x14>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	d8f7      	bhi.n	800283a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d108      	bne.n	800286e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	441a      	add	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d118      	bne.n	80028b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <prvInsertBlockIntoFreeList+0xb0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d00d      	beq.n	80028aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e008      	b.n	80028bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <prvInsertBlockIntoFreeList+0xb0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e003      	b.n	80028bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d002      	beq.n	80028ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20012d9c 	.word	0x20012d9c
 80028dc:	20012da4 	.word	0x20012da4

080028e0 <std>:
 80028e0:	2300      	movs	r3, #0
 80028e2:	b510      	push	{r4, lr}
 80028e4:	4604      	mov	r4, r0
 80028e6:	e9c0 3300 	strd	r3, r3, [r0]
 80028ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ee:	6083      	str	r3, [r0, #8]
 80028f0:	8181      	strh	r1, [r0, #12]
 80028f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028f4:	81c2      	strh	r2, [r0, #14]
 80028f6:	6183      	str	r3, [r0, #24]
 80028f8:	4619      	mov	r1, r3
 80028fa:	2208      	movs	r2, #8
 80028fc:	305c      	adds	r0, #92	@ 0x5c
 80028fe:	f000 f9e7 	bl	8002cd0 <memset>
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <std+0x58>)
 8002904:	6263      	str	r3, [r4, #36]	@ 0x24
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <std+0x5c>)
 8002908:	62a3      	str	r3, [r4, #40]	@ 0x28
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <std+0x60>)
 800290c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <std+0x64>)
 8002910:	6323      	str	r3, [r4, #48]	@ 0x30
 8002912:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <std+0x68>)
 8002914:	6224      	str	r4, [r4, #32]
 8002916:	429c      	cmp	r4, r3
 8002918:	d006      	beq.n	8002928 <std+0x48>
 800291a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800291e:	4294      	cmp	r4, r2
 8002920:	d002      	beq.n	8002928 <std+0x48>
 8002922:	33d0      	adds	r3, #208	@ 0xd0
 8002924:	429c      	cmp	r4, r3
 8002926:	d105      	bne.n	8002934 <std+0x54>
 8002928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800292c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002930:	f000 ba40 	b.w	8002db4 <__retarget_lock_init_recursive>
 8002934:	bd10      	pop	{r4, pc}
 8002936:	bf00      	nop
 8002938:	08002b21 	.word	0x08002b21
 800293c:	08002b43 	.word	0x08002b43
 8002940:	08002b7b 	.word	0x08002b7b
 8002944:	08002b9f 	.word	0x08002b9f
 8002948:	20012dbc 	.word	0x20012dbc

0800294c <stdio_exit_handler>:
 800294c:	4a02      	ldr	r2, [pc, #8]	@ (8002958 <stdio_exit_handler+0xc>)
 800294e:	4903      	ldr	r1, [pc, #12]	@ (800295c <stdio_exit_handler+0x10>)
 8002950:	4803      	ldr	r0, [pc, #12]	@ (8002960 <stdio_exit_handler+0x14>)
 8002952:	f000 b869 	b.w	8002a28 <_fwalk_sglue>
 8002956:	bf00      	nop
 8002958:	20000014 	.word	0x20000014
 800295c:	080030b5 	.word	0x080030b5
 8002960:	20000024 	.word	0x20000024

08002964 <cleanup_stdio>:
 8002964:	6841      	ldr	r1, [r0, #4]
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <cleanup_stdio+0x34>)
 8002968:	4299      	cmp	r1, r3
 800296a:	b510      	push	{r4, lr}
 800296c:	4604      	mov	r4, r0
 800296e:	d001      	beq.n	8002974 <cleanup_stdio+0x10>
 8002970:	f000 fba0 	bl	80030b4 <_fflush_r>
 8002974:	68a1      	ldr	r1, [r4, #8]
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <cleanup_stdio+0x38>)
 8002978:	4299      	cmp	r1, r3
 800297a:	d002      	beq.n	8002982 <cleanup_stdio+0x1e>
 800297c:	4620      	mov	r0, r4
 800297e:	f000 fb99 	bl	80030b4 <_fflush_r>
 8002982:	68e1      	ldr	r1, [r4, #12]
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <cleanup_stdio+0x3c>)
 8002986:	4299      	cmp	r1, r3
 8002988:	d004      	beq.n	8002994 <cleanup_stdio+0x30>
 800298a:	4620      	mov	r0, r4
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002990:	f000 bb90 	b.w	80030b4 <_fflush_r>
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	20012dbc 	.word	0x20012dbc
 800299c:	20012e24 	.word	0x20012e24
 80029a0:	20012e8c 	.word	0x20012e8c

080029a4 <global_stdio_init.part.0>:
 80029a4:	b510      	push	{r4, lr}
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <global_stdio_init.part.0+0x30>)
 80029a8:	4c0b      	ldr	r4, [pc, #44]	@ (80029d8 <global_stdio_init.part.0+0x34>)
 80029aa:	4a0c      	ldr	r2, [pc, #48]	@ (80029dc <global_stdio_init.part.0+0x38>)
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4620      	mov	r0, r4
 80029b0:	2200      	movs	r2, #0
 80029b2:	2104      	movs	r1, #4
 80029b4:	f7ff ff94 	bl	80028e0 <std>
 80029b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029bc:	2201      	movs	r2, #1
 80029be:	2109      	movs	r1, #9
 80029c0:	f7ff ff8e 	bl	80028e0 <std>
 80029c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80029c8:	2202      	movs	r2, #2
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ce:	2112      	movs	r1, #18
 80029d0:	f7ff bf86 	b.w	80028e0 <std>
 80029d4:	20012ef4 	.word	0x20012ef4
 80029d8:	20012dbc 	.word	0x20012dbc
 80029dc:	0800294d 	.word	0x0800294d

080029e0 <__sfp_lock_acquire>:
 80029e0:	4801      	ldr	r0, [pc, #4]	@ (80029e8 <__sfp_lock_acquire+0x8>)
 80029e2:	f000 b9e8 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 80029e6:	bf00      	nop
 80029e8:	20012efd 	.word	0x20012efd

080029ec <__sfp_lock_release>:
 80029ec:	4801      	ldr	r0, [pc, #4]	@ (80029f4 <__sfp_lock_release+0x8>)
 80029ee:	f000 b9e3 	b.w	8002db8 <__retarget_lock_release_recursive>
 80029f2:	bf00      	nop
 80029f4:	20012efd 	.word	0x20012efd

080029f8 <__sinit>:
 80029f8:	b510      	push	{r4, lr}
 80029fa:	4604      	mov	r4, r0
 80029fc:	f7ff fff0 	bl	80029e0 <__sfp_lock_acquire>
 8002a00:	6a23      	ldr	r3, [r4, #32]
 8002a02:	b11b      	cbz	r3, 8002a0c <__sinit+0x14>
 8002a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a08:	f7ff bff0 	b.w	80029ec <__sfp_lock_release>
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__sinit+0x28>)
 8002a0e:	6223      	str	r3, [r4, #32]
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__sinit+0x2c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f5      	bne.n	8002a04 <__sinit+0xc>
 8002a18:	f7ff ffc4 	bl	80029a4 <global_stdio_init.part.0>
 8002a1c:	e7f2      	b.n	8002a04 <__sinit+0xc>
 8002a1e:	bf00      	nop
 8002a20:	08002965 	.word	0x08002965
 8002a24:	20012ef4 	.word	0x20012ef4

08002a28 <_fwalk_sglue>:
 8002a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a2c:	4607      	mov	r7, r0
 8002a2e:	4688      	mov	r8, r1
 8002a30:	4614      	mov	r4, r2
 8002a32:	2600      	movs	r6, #0
 8002a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a38:	f1b9 0901 	subs.w	r9, r9, #1
 8002a3c:	d505      	bpl.n	8002a4a <_fwalk_sglue+0x22>
 8002a3e:	6824      	ldr	r4, [r4, #0]
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	d1f7      	bne.n	8002a34 <_fwalk_sglue+0xc>
 8002a44:	4630      	mov	r0, r6
 8002a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a4a:	89ab      	ldrh	r3, [r5, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d907      	bls.n	8002a60 <_fwalk_sglue+0x38>
 8002a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a54:	3301      	adds	r3, #1
 8002a56:	d003      	beq.n	8002a60 <_fwalk_sglue+0x38>
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	47c0      	blx	r8
 8002a5e:	4306      	orrs	r6, r0
 8002a60:	3568      	adds	r5, #104	@ 0x68
 8002a62:	e7e9      	b.n	8002a38 <_fwalk_sglue+0x10>

08002a64 <_puts_r>:
 8002a64:	6a03      	ldr	r3, [r0, #32]
 8002a66:	b570      	push	{r4, r5, r6, lr}
 8002a68:	6884      	ldr	r4, [r0, #8]
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	460e      	mov	r6, r1
 8002a6e:	b90b      	cbnz	r3, 8002a74 <_puts_r+0x10>
 8002a70:	f7ff ffc2 	bl	80029f8 <__sinit>
 8002a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a76:	07db      	lsls	r3, r3, #31
 8002a78:	d405      	bmi.n	8002a86 <_puts_r+0x22>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	0598      	lsls	r0, r3, #22
 8002a7e:	d402      	bmi.n	8002a86 <_puts_r+0x22>
 8002a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a82:	f000 f998 	bl	8002db6 <__retarget_lock_acquire_recursive>
 8002a86:	89a3      	ldrh	r3, [r4, #12]
 8002a88:	0719      	lsls	r1, r3, #28
 8002a8a:	d502      	bpl.n	8002a92 <_puts_r+0x2e>
 8002a8c:	6923      	ldr	r3, [r4, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d135      	bne.n	8002afe <_puts_r+0x9a>
 8002a92:	4621      	mov	r1, r4
 8002a94:	4628      	mov	r0, r5
 8002a96:	f000 f8c5 	bl	8002c24 <__swsetup_r>
 8002a9a:	b380      	cbz	r0, 8002afe <_puts_r+0x9a>
 8002a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8002aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aa2:	07da      	lsls	r2, r3, #31
 8002aa4:	d405      	bmi.n	8002ab2 <_puts_r+0x4e>
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	059b      	lsls	r3, r3, #22
 8002aaa:	d402      	bmi.n	8002ab2 <_puts_r+0x4e>
 8002aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002aae:	f000 f983 	bl	8002db8 <__retarget_lock_release_recursive>
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da04      	bge.n	8002ac4 <_puts_r+0x60>
 8002aba:	69a2      	ldr	r2, [r4, #24]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dc17      	bgt.n	8002af0 <_puts_r+0x8c>
 8002ac0:	290a      	cmp	r1, #10
 8002ac2:	d015      	beq.n	8002af0 <_puts_r+0x8c>
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	6022      	str	r2, [r4, #0]
 8002aca:	7019      	strb	r1, [r3, #0]
 8002acc:	68a3      	ldr	r3, [r4, #8]
 8002ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	2900      	cmp	r1, #0
 8002ad8:	d1ed      	bne.n	8002ab6 <_puts_r+0x52>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da11      	bge.n	8002b02 <_puts_r+0x9e>
 8002ade:	4622      	mov	r2, r4
 8002ae0:	210a      	movs	r1, #10
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 f85f 	bl	8002ba6 <__swbuf_r>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d0d7      	beq.n	8002a9c <_puts_r+0x38>
 8002aec:	250a      	movs	r5, #10
 8002aee:	e7d7      	b.n	8002aa0 <_puts_r+0x3c>
 8002af0:	4622      	mov	r2, r4
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 f857 	bl	8002ba6 <__swbuf_r>
 8002af8:	3001      	adds	r0, #1
 8002afa:	d1e7      	bne.n	8002acc <_puts_r+0x68>
 8002afc:	e7ce      	b.n	8002a9c <_puts_r+0x38>
 8002afe:	3e01      	subs	r6, #1
 8002b00:	e7e4      	b.n	8002acc <_puts_r+0x68>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	6022      	str	r2, [r4, #0]
 8002b08:	220a      	movs	r2, #10
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e7ee      	b.n	8002aec <_puts_r+0x88>
	...

08002b10 <puts>:
 8002b10:	4b02      	ldr	r3, [pc, #8]	@ (8002b1c <puts+0xc>)
 8002b12:	4601      	mov	r1, r0
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	f7ff bfa5 	b.w	8002a64 <_puts_r>
 8002b1a:	bf00      	nop
 8002b1c:	20000020 	.word	0x20000020

08002b20 <__sread>:
 8002b20:	b510      	push	{r4, lr}
 8002b22:	460c      	mov	r4, r1
 8002b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b28:	f000 f8fc 	bl	8002d24 <_read_r>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	bfab      	itete	ge
 8002b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b32:	89a3      	ldrhlt	r3, [r4, #12]
 8002b34:	181b      	addge	r3, r3, r0
 8002b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b3a:	bfac      	ite	ge
 8002b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b3e:	81a3      	strhlt	r3, [r4, #12]
 8002b40:	bd10      	pop	{r4, pc}

08002b42 <__swrite>:
 8002b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b46:	461f      	mov	r7, r3
 8002b48:	898b      	ldrh	r3, [r1, #12]
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	4605      	mov	r5, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	4616      	mov	r6, r2
 8002b52:	d505      	bpl.n	8002b60 <__swrite+0x1e>
 8002b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b58:	2302      	movs	r3, #2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f000 f8d0 	bl	8002d00 <_lseek_r>
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b6a:	81a3      	strh	r3, [r4, #12]
 8002b6c:	4632      	mov	r2, r6
 8002b6e:	463b      	mov	r3, r7
 8002b70:	4628      	mov	r0, r5
 8002b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b76:	f000 b8e7 	b.w	8002d48 <_write_r>

08002b7a <__sseek>:
 8002b7a:	b510      	push	{r4, lr}
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b82:	f000 f8bd 	bl	8002d00 <_lseek_r>
 8002b86:	1c43      	adds	r3, r0, #1
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	bf15      	itete	ne
 8002b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b96:	81a3      	strheq	r3, [r4, #12]
 8002b98:	bf18      	it	ne
 8002b9a:	81a3      	strhne	r3, [r4, #12]
 8002b9c:	bd10      	pop	{r4, pc}

08002b9e <__sclose>:
 8002b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba2:	f000 b89d 	b.w	8002ce0 <_close_r>

08002ba6 <__swbuf_r>:
 8002ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba8:	460e      	mov	r6, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	4605      	mov	r5, r0
 8002bae:	b118      	cbz	r0, 8002bb8 <__swbuf_r+0x12>
 8002bb0:	6a03      	ldr	r3, [r0, #32]
 8002bb2:	b90b      	cbnz	r3, 8002bb8 <__swbuf_r+0x12>
 8002bb4:	f7ff ff20 	bl	80029f8 <__sinit>
 8002bb8:	69a3      	ldr	r3, [r4, #24]
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	071a      	lsls	r2, r3, #28
 8002bc0:	d501      	bpl.n	8002bc6 <__swbuf_r+0x20>
 8002bc2:	6923      	ldr	r3, [r4, #16]
 8002bc4:	b943      	cbnz	r3, 8002bd8 <__swbuf_r+0x32>
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 f82b 	bl	8002c24 <__swsetup_r>
 8002bce:	b118      	cbz	r0, 8002bd8 <__swbuf_r+0x32>
 8002bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	6922      	ldr	r2, [r4, #16]
 8002bdc:	1a98      	subs	r0, r3, r2
 8002bde:	6963      	ldr	r3, [r4, #20]
 8002be0:	b2f6      	uxtb	r6, r6
 8002be2:	4283      	cmp	r3, r0
 8002be4:	4637      	mov	r7, r6
 8002be6:	dc05      	bgt.n	8002bf4 <__swbuf_r+0x4e>
 8002be8:	4621      	mov	r1, r4
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 fa62 	bl	80030b4 <_fflush_r>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d1ed      	bne.n	8002bd0 <__swbuf_r+0x2a>
 8002bf4:	68a3      	ldr	r3, [r4, #8]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60a3      	str	r3, [r4, #8]
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	6022      	str	r2, [r4, #0]
 8002c00:	701e      	strb	r6, [r3, #0]
 8002c02:	6962      	ldr	r2, [r4, #20]
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d004      	beq.n	8002c14 <__swbuf_r+0x6e>
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	07db      	lsls	r3, r3, #31
 8002c0e:	d5e1      	bpl.n	8002bd4 <__swbuf_r+0x2e>
 8002c10:	2e0a      	cmp	r6, #10
 8002c12:	d1df      	bne.n	8002bd4 <__swbuf_r+0x2e>
 8002c14:	4621      	mov	r1, r4
 8002c16:	4628      	mov	r0, r5
 8002c18:	f000 fa4c 	bl	80030b4 <_fflush_r>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d0d9      	beq.n	8002bd4 <__swbuf_r+0x2e>
 8002c20:	e7d6      	b.n	8002bd0 <__swbuf_r+0x2a>
	...

08002c24 <__swsetup_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <__swsetup_r+0xa8>)
 8002c28:	4605      	mov	r5, r0
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	b118      	cbz	r0, 8002c38 <__swsetup_r+0x14>
 8002c30:	6a03      	ldr	r3, [r0, #32]
 8002c32:	b90b      	cbnz	r3, 8002c38 <__swsetup_r+0x14>
 8002c34:	f7ff fee0 	bl	80029f8 <__sinit>
 8002c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c3c:	0719      	lsls	r1, r3, #28
 8002c3e:	d422      	bmi.n	8002c86 <__swsetup_r+0x62>
 8002c40:	06da      	lsls	r2, r3, #27
 8002c42:	d407      	bmi.n	8002c54 <__swsetup_r+0x30>
 8002c44:	2209      	movs	r2, #9
 8002c46:	602a      	str	r2, [r5, #0]
 8002c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	e033      	b.n	8002cbc <__swsetup_r+0x98>
 8002c54:	0758      	lsls	r0, r3, #29
 8002c56:	d512      	bpl.n	8002c7e <__swsetup_r+0x5a>
 8002c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c5a:	b141      	cbz	r1, 8002c6e <__swsetup_r+0x4a>
 8002c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c60:	4299      	cmp	r1, r3
 8002c62:	d002      	beq.n	8002c6a <__swsetup_r+0x46>
 8002c64:	4628      	mov	r0, r5
 8002c66:	f000 f8a9 	bl	8002dbc <_free_r>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c74:	81a3      	strh	r3, [r4, #12]
 8002c76:	2300      	movs	r3, #0
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	6023      	str	r3, [r4, #0]
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	b94b      	cbnz	r3, 8002c9e <__swsetup_r+0x7a>
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c94:	d003      	beq.n	8002c9e <__swsetup_r+0x7a>
 8002c96:	4621      	mov	r1, r4
 8002c98:	4628      	mov	r0, r5
 8002c9a:	f000 fa59 	bl	8003150 <__smakebuf_r>
 8002c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ca2:	f013 0201 	ands.w	r2, r3, #1
 8002ca6:	d00a      	beq.n	8002cbe <__swsetup_r+0x9a>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60a2      	str	r2, [r4, #8]
 8002cac:	6962      	ldr	r2, [r4, #20]
 8002cae:	4252      	negs	r2, r2
 8002cb0:	61a2      	str	r2, [r4, #24]
 8002cb2:	6922      	ldr	r2, [r4, #16]
 8002cb4:	b942      	cbnz	r2, 8002cc8 <__swsetup_r+0xa4>
 8002cb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cba:	d1c5      	bne.n	8002c48 <__swsetup_r+0x24>
 8002cbc:	bd38      	pop	{r3, r4, r5, pc}
 8002cbe:	0799      	lsls	r1, r3, #30
 8002cc0:	bf58      	it	pl
 8002cc2:	6962      	ldrpl	r2, [r4, #20]
 8002cc4:	60a2      	str	r2, [r4, #8]
 8002cc6:	e7f4      	b.n	8002cb2 <__swsetup_r+0x8e>
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e7f7      	b.n	8002cbc <__swsetup_r+0x98>
 8002ccc:	20000020 	.word	0x20000020

08002cd0 <memset>:
 8002cd0:	4402      	add	r2, r0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_close_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	4d06      	ldr	r5, [pc, #24]	@ (8002cfc <_close_r+0x1c>)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	602b      	str	r3, [r5, #0]
 8002cec:	f7fd fdb3 	bl	8000856 <_close>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d102      	bne.n	8002cfa <_close_r+0x1a>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	b103      	cbz	r3, 8002cfa <_close_r+0x1a>
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	20012ef8 	.word	0x20012ef8

08002d00 <_lseek_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4d07      	ldr	r5, [pc, #28]	@ (8002d20 <_lseek_r+0x20>)
 8002d04:	4604      	mov	r4, r0
 8002d06:	4608      	mov	r0, r1
 8002d08:	4611      	mov	r1, r2
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	602a      	str	r2, [r5, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f7fd fdc8 	bl	80008a4 <_lseek>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_lseek_r+0x1e>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_lseek_r+0x1e>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	20012ef8 	.word	0x20012ef8

08002d24 <_read_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4d07      	ldr	r5, [pc, #28]	@ (8002d44 <_read_r+0x20>)
 8002d28:	4604      	mov	r4, r0
 8002d2a:	4608      	mov	r0, r1
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	602a      	str	r2, [r5, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7fd fd56 	bl	80007e4 <_read>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_read_r+0x1e>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_read_r+0x1e>
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	20012ef8 	.word	0x20012ef8

08002d48 <_write_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4d07      	ldr	r5, [pc, #28]	@ (8002d68 <_write_r+0x20>)
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	602a      	str	r2, [r5, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7fd fd61 	bl	800081e <_write>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_write_r+0x1e>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_write_r+0x1e>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	20012ef8 	.word	0x20012ef8

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	@ (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 fa62 	bl	8003248 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	080032c0 	.word	0x080032c0
 8002da8:	080032c0 	.word	0x080032c0
 8002dac:	080032c0 	.word	0x080032c0
 8002db0:	080032c4 	.word	0x080032c4

08002db4 <__retarget_lock_init_recursive>:
 8002db4:	4770      	bx	lr

08002db6 <__retarget_lock_acquire_recursive>:
 8002db6:	4770      	bx	lr

08002db8 <__retarget_lock_release_recursive>:
 8002db8:	4770      	bx	lr
	...

08002dbc <_free_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d041      	beq.n	8002e48 <_free_r+0x8c>
 8002dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc8:	1f0c      	subs	r4, r1, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bfb8      	it	lt
 8002dce:	18e4      	addlt	r4, r4, r3
 8002dd0:	f000 f8e0 	bl	8002f94 <__malloc_lock>
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <_free_r+0x90>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	b933      	cbnz	r3, 8002de8 <_free_r+0x2c>
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	6014      	str	r4, [r2, #0]
 8002dde:	4628      	mov	r0, r5
 8002de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002de4:	f000 b8dc 	b.w	8002fa0 <__malloc_unlock>
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d908      	bls.n	8002dfe <_free_r+0x42>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	e7ed      	b.n	8002dda <_free_r+0x1e>
 8002dfe:	461a      	mov	r2, r3
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b10b      	cbz	r3, 8002e08 <_free_r+0x4c>
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d9fa      	bls.n	8002dfe <_free_r+0x42>
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	1850      	adds	r0, r2, r1
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	d10b      	bne.n	8002e28 <_free_r+0x6c>
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	4401      	add	r1, r0
 8002e14:	1850      	adds	r0, r2, r1
 8002e16:	4283      	cmp	r3, r0
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	d1e0      	bne.n	8002dde <_free_r+0x22>
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6053      	str	r3, [r2, #4]
 8002e22:	4408      	add	r0, r1
 8002e24:	6010      	str	r0, [r2, #0]
 8002e26:	e7da      	b.n	8002dde <_free_r+0x22>
 8002e28:	d902      	bls.n	8002e30 <_free_r+0x74>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	e7d6      	b.n	8002dde <_free_r+0x22>
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	1821      	adds	r1, r4, r0
 8002e34:	428b      	cmp	r3, r1
 8002e36:	bf04      	itt	eq
 8002e38:	6819      	ldreq	r1, [r3, #0]
 8002e3a:	685b      	ldreq	r3, [r3, #4]
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	bf04      	itt	eq
 8002e40:	1809      	addeq	r1, r1, r0
 8002e42:	6021      	streq	r1, [r4, #0]
 8002e44:	6054      	str	r4, [r2, #4]
 8002e46:	e7ca      	b.n	8002dde <_free_r+0x22>
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20012f04 	.word	0x20012f04

08002e50 <sbrk_aligned>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4e0f      	ldr	r6, [pc, #60]	@ (8002e90 <sbrk_aligned+0x40>)
 8002e54:	460c      	mov	r4, r1
 8002e56:	6831      	ldr	r1, [r6, #0]
 8002e58:	4605      	mov	r5, r0
 8002e5a:	b911      	cbnz	r1, 8002e62 <sbrk_aligned+0x12>
 8002e5c:	f000 f9d6 	bl	800320c <_sbrk_r>
 8002e60:	6030      	str	r0, [r6, #0]
 8002e62:	4621      	mov	r1, r4
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 f9d1 	bl	800320c <_sbrk_r>
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	d103      	bne.n	8002e76 <sbrk_aligned+0x26>
 8002e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8002e72:	4620      	mov	r0, r4
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	1cc4      	adds	r4, r0, #3
 8002e78:	f024 0403 	bic.w	r4, r4, #3
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d0f8      	beq.n	8002e72 <sbrk_aligned+0x22>
 8002e80:	1a21      	subs	r1, r4, r0
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f9c2 	bl	800320c <_sbrk_r>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d1f2      	bne.n	8002e72 <sbrk_aligned+0x22>
 8002e8c:	e7ef      	b.n	8002e6e <sbrk_aligned+0x1e>
 8002e8e:	bf00      	nop
 8002e90:	20012f00 	.word	0x20012f00

08002e94 <_malloc_r>:
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e98:	1ccd      	adds	r5, r1, #3
 8002e9a:	f025 0503 	bic.w	r5, r5, #3
 8002e9e:	3508      	adds	r5, #8
 8002ea0:	2d0c      	cmp	r5, #12
 8002ea2:	bf38      	it	cc
 8002ea4:	250c      	movcc	r5, #12
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	db01      	blt.n	8002eb0 <_malloc_r+0x1c>
 8002eac:	42a9      	cmp	r1, r5
 8002eae:	d904      	bls.n	8002eba <_malloc_r+0x26>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	6033      	str	r3, [r6, #0]
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f90 <_malloc_r+0xfc>
 8002ebe:	f000 f869 	bl	8002f94 <__malloc_lock>
 8002ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	bb44      	cbnz	r4, 8002f1c <_malloc_r+0x88>
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f7ff ffbf 	bl	8002e50 <sbrk_aligned>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	d158      	bne.n	8002f8a <_malloc_r+0xf6>
 8002ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8002edc:	4627      	mov	r7, r4
 8002ede:	2f00      	cmp	r7, #0
 8002ee0:	d143      	bne.n	8002f6a <_malloc_r+0xd6>
 8002ee2:	2c00      	cmp	r4, #0
 8002ee4:	d04b      	beq.n	8002f7e <_malloc_r+0xea>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	4639      	mov	r1, r7
 8002eea:	4630      	mov	r0, r6
 8002eec:	eb04 0903 	add.w	r9, r4, r3
 8002ef0:	f000 f98c 	bl	800320c <_sbrk_r>
 8002ef4:	4581      	cmp	r9, r0
 8002ef6:	d142      	bne.n	8002f7e <_malloc_r+0xea>
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	1a6d      	subs	r5, r5, r1
 8002efc:	4629      	mov	r1, r5
 8002efe:	4630      	mov	r0, r6
 8002f00:	f7ff ffa6 	bl	8002e50 <sbrk_aligned>
 8002f04:	3001      	adds	r0, #1
 8002f06:	d03a      	beq.n	8002f7e <_malloc_r+0xea>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	442b      	add	r3, r5
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	bb62      	cbnz	r2, 8002f70 <_malloc_r+0xdc>
 8002f16:	f8c8 7000 	str.w	r7, [r8]
 8002f1a:	e00f      	b.n	8002f3c <_malloc_r+0xa8>
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	1b52      	subs	r2, r2, r5
 8002f20:	d420      	bmi.n	8002f64 <_malloc_r+0xd0>
 8002f22:	2a0b      	cmp	r2, #11
 8002f24:	d917      	bls.n	8002f56 <_malloc_r+0xc2>
 8002f26:	1961      	adds	r1, r4, r5
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	6025      	str	r5, [r4, #0]
 8002f2c:	bf18      	it	ne
 8002f2e:	6059      	strne	r1, [r3, #4]
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	bf08      	it	eq
 8002f34:	f8c8 1000 	streq.w	r1, [r8]
 8002f38:	5162      	str	r2, [r4, r5]
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f000 f82f 	bl	8002fa0 <__malloc_unlock>
 8002f42:	f104 000b 	add.w	r0, r4, #11
 8002f46:	1d23      	adds	r3, r4, #4
 8002f48:	f020 0007 	bic.w	r0, r0, #7
 8002f4c:	1ac2      	subs	r2, r0, r3
 8002f4e:	bf1c      	itt	ne
 8002f50:	1a1b      	subne	r3, r3, r0
 8002f52:	50a3      	strne	r3, [r4, r2]
 8002f54:	e7af      	b.n	8002eb6 <_malloc_r+0x22>
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	bf0c      	ite	eq
 8002f5c:	f8c8 2000 	streq.w	r2, [r8]
 8002f60:	605a      	strne	r2, [r3, #4]
 8002f62:	e7eb      	b.n	8002f3c <_malloc_r+0xa8>
 8002f64:	4623      	mov	r3, r4
 8002f66:	6864      	ldr	r4, [r4, #4]
 8002f68:	e7ae      	b.n	8002ec8 <_malloc_r+0x34>
 8002f6a:	463c      	mov	r4, r7
 8002f6c:	687f      	ldr	r7, [r7, #4]
 8002f6e:	e7b6      	b.n	8002ede <_malloc_r+0x4a>
 8002f70:	461a      	mov	r2, r3
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d1fb      	bne.n	8002f70 <_malloc_r+0xdc>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6053      	str	r3, [r2, #4]
 8002f7c:	e7de      	b.n	8002f3c <_malloc_r+0xa8>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	4630      	mov	r0, r6
 8002f84:	f000 f80c 	bl	8002fa0 <__malloc_unlock>
 8002f88:	e794      	b.n	8002eb4 <_malloc_r+0x20>
 8002f8a:	6005      	str	r5, [r0, #0]
 8002f8c:	e7d6      	b.n	8002f3c <_malloc_r+0xa8>
 8002f8e:	bf00      	nop
 8002f90:	20012f04 	.word	0x20012f04

08002f94 <__malloc_lock>:
 8002f94:	4801      	ldr	r0, [pc, #4]	@ (8002f9c <__malloc_lock+0x8>)
 8002f96:	f7ff bf0e 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20012efc 	.word	0x20012efc

08002fa0 <__malloc_unlock>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	@ (8002fa8 <__malloc_unlock+0x8>)
 8002fa2:	f7ff bf09 	b.w	8002db8 <__retarget_lock_release_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20012efc 	.word	0x20012efc

08002fac <__sflush_r>:
 8002fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb4:	0716      	lsls	r6, r2, #28
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	d454      	bmi.n	8003066 <__sflush_r+0xba>
 8002fbc:	684b      	ldr	r3, [r1, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dc02      	bgt.n	8002fc8 <__sflush_r+0x1c>
 8002fc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dd48      	ble.n	800305a <__sflush_r+0xae>
 8002fc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fca:	2e00      	cmp	r6, #0
 8002fcc:	d045      	beq.n	800305a <__sflush_r+0xae>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fd4:	682f      	ldr	r7, [r5, #0]
 8002fd6:	6a21      	ldr	r1, [r4, #32]
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	d030      	beq.n	800303e <__sflush_r+0x92>
 8002fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	0759      	lsls	r1, r3, #29
 8002fe2:	d505      	bpl.n	8002ff0 <__sflush_r+0x44>
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fea:	b10b      	cbz	r3, 8002ff0 <__sflush_r+0x44>
 8002fec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fee:	1ad2      	subs	r2, r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ff4:	6a21      	ldr	r1, [r4, #32]
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	47b0      	blx	r6
 8002ffa:	1c43      	adds	r3, r0, #1
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	d106      	bne.n	800300e <__sflush_r+0x62>
 8003000:	6829      	ldr	r1, [r5, #0]
 8003002:	291d      	cmp	r1, #29
 8003004:	d82b      	bhi.n	800305e <__sflush_r+0xb2>
 8003006:	4a2a      	ldr	r2, [pc, #168]	@ (80030b0 <__sflush_r+0x104>)
 8003008:	410a      	asrs	r2, r1
 800300a:	07d6      	lsls	r6, r2, #31
 800300c:	d427      	bmi.n	800305e <__sflush_r+0xb2>
 800300e:	2200      	movs	r2, #0
 8003010:	6062      	str	r2, [r4, #4]
 8003012:	04d9      	lsls	r1, r3, #19
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	d504      	bpl.n	8003024 <__sflush_r+0x78>
 800301a:	1c42      	adds	r2, r0, #1
 800301c:	d101      	bne.n	8003022 <__sflush_r+0x76>
 800301e:	682b      	ldr	r3, [r5, #0]
 8003020:	b903      	cbnz	r3, 8003024 <__sflush_r+0x78>
 8003022:	6560      	str	r0, [r4, #84]	@ 0x54
 8003024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003026:	602f      	str	r7, [r5, #0]
 8003028:	b1b9      	cbz	r1, 800305a <__sflush_r+0xae>
 800302a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800302e:	4299      	cmp	r1, r3
 8003030:	d002      	beq.n	8003038 <__sflush_r+0x8c>
 8003032:	4628      	mov	r0, r5
 8003034:	f7ff fec2 	bl	8002dbc <_free_r>
 8003038:	2300      	movs	r3, #0
 800303a:	6363      	str	r3, [r4, #52]	@ 0x34
 800303c:	e00d      	b.n	800305a <__sflush_r+0xae>
 800303e:	2301      	movs	r3, #1
 8003040:	4628      	mov	r0, r5
 8003042:	47b0      	blx	r6
 8003044:	4602      	mov	r2, r0
 8003046:	1c50      	adds	r0, r2, #1
 8003048:	d1c9      	bne.n	8002fde <__sflush_r+0x32>
 800304a:	682b      	ldr	r3, [r5, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0c6      	beq.n	8002fde <__sflush_r+0x32>
 8003050:	2b1d      	cmp	r3, #29
 8003052:	d001      	beq.n	8003058 <__sflush_r+0xac>
 8003054:	2b16      	cmp	r3, #22
 8003056:	d11e      	bne.n	8003096 <__sflush_r+0xea>
 8003058:	602f      	str	r7, [r5, #0]
 800305a:	2000      	movs	r0, #0
 800305c:	e022      	b.n	80030a4 <__sflush_r+0xf8>
 800305e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003062:	b21b      	sxth	r3, r3
 8003064:	e01b      	b.n	800309e <__sflush_r+0xf2>
 8003066:	690f      	ldr	r7, [r1, #16]
 8003068:	2f00      	cmp	r7, #0
 800306a:	d0f6      	beq.n	800305a <__sflush_r+0xae>
 800306c:	0793      	lsls	r3, r2, #30
 800306e:	680e      	ldr	r6, [r1, #0]
 8003070:	bf08      	it	eq
 8003072:	694b      	ldreq	r3, [r1, #20]
 8003074:	600f      	str	r7, [r1, #0]
 8003076:	bf18      	it	ne
 8003078:	2300      	movne	r3, #0
 800307a:	eba6 0807 	sub.w	r8, r6, r7
 800307e:	608b      	str	r3, [r1, #8]
 8003080:	f1b8 0f00 	cmp.w	r8, #0
 8003084:	dde9      	ble.n	800305a <__sflush_r+0xae>
 8003086:	6a21      	ldr	r1, [r4, #32]
 8003088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800308a:	4643      	mov	r3, r8
 800308c:	463a      	mov	r2, r7
 800308e:	4628      	mov	r0, r5
 8003090:	47b0      	blx	r6
 8003092:	2800      	cmp	r0, #0
 8003094:	dc08      	bgt.n	80030a8 <__sflush_r+0xfc>
 8003096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a8:	4407      	add	r7, r0
 80030aa:	eba8 0800 	sub.w	r8, r8, r0
 80030ae:	e7e7      	b.n	8003080 <__sflush_r+0xd4>
 80030b0:	dfbffffe 	.word	0xdfbffffe

080030b4 <_fflush_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	690b      	ldr	r3, [r1, #16]
 80030b8:	4605      	mov	r5, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	b913      	cbnz	r3, 80030c4 <_fflush_r+0x10>
 80030be:	2500      	movs	r5, #0
 80030c0:	4628      	mov	r0, r5
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	b118      	cbz	r0, 80030ce <_fflush_r+0x1a>
 80030c6:	6a03      	ldr	r3, [r0, #32]
 80030c8:	b90b      	cbnz	r3, 80030ce <_fflush_r+0x1a>
 80030ca:	f7ff fc95 	bl	80029f8 <__sinit>
 80030ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f3      	beq.n	80030be <_fflush_r+0xa>
 80030d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030d8:	07d0      	lsls	r0, r2, #31
 80030da:	d404      	bmi.n	80030e6 <_fflush_r+0x32>
 80030dc:	0599      	lsls	r1, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_fflush_r+0x32>
 80030e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030e2:	f7ff fe68 	bl	8002db6 <__retarget_lock_acquire_recursive>
 80030e6:	4628      	mov	r0, r5
 80030e8:	4621      	mov	r1, r4
 80030ea:	f7ff ff5f 	bl	8002fac <__sflush_r>
 80030ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030f0:	07da      	lsls	r2, r3, #31
 80030f2:	4605      	mov	r5, r0
 80030f4:	d4e4      	bmi.n	80030c0 <_fflush_r+0xc>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	059b      	lsls	r3, r3, #22
 80030fa:	d4e1      	bmi.n	80030c0 <_fflush_r+0xc>
 80030fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030fe:	f7ff fe5b 	bl	8002db8 <__retarget_lock_release_recursive>
 8003102:	e7dd      	b.n	80030c0 <_fflush_r+0xc>

08003104 <__swhatbuf_r>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	460c      	mov	r4, r1
 8003108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800310c:	2900      	cmp	r1, #0
 800310e:	b096      	sub	sp, #88	@ 0x58
 8003110:	4615      	mov	r5, r2
 8003112:	461e      	mov	r6, r3
 8003114:	da0d      	bge.n	8003132 <__swhatbuf_r+0x2e>
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	bf14      	ite	ne
 8003122:	2340      	movne	r3, #64	@ 0x40
 8003124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003128:	2000      	movs	r0, #0
 800312a:	6031      	str	r1, [r6, #0]
 800312c:	602b      	str	r3, [r5, #0]
 800312e:	b016      	add	sp, #88	@ 0x58
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	466a      	mov	r2, sp
 8003134:	f000 f848 	bl	80031c8 <_fstat_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	dbec      	blt.n	8003116 <__swhatbuf_r+0x12>
 800313c:	9901      	ldr	r1, [sp, #4]
 800313e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003146:	4259      	negs	r1, r3
 8003148:	4159      	adcs	r1, r3
 800314a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800314e:	e7eb      	b.n	8003128 <__swhatbuf_r+0x24>

08003150 <__smakebuf_r>:
 8003150:	898b      	ldrh	r3, [r1, #12]
 8003152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003154:	079d      	lsls	r5, r3, #30
 8003156:	4606      	mov	r6, r0
 8003158:	460c      	mov	r4, r1
 800315a:	d507      	bpl.n	800316c <__smakebuf_r+0x1c>
 800315c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	6123      	str	r3, [r4, #16]
 8003164:	2301      	movs	r3, #1
 8003166:	6163      	str	r3, [r4, #20]
 8003168:	b003      	add	sp, #12
 800316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316c:	ab01      	add	r3, sp, #4
 800316e:	466a      	mov	r2, sp
 8003170:	f7ff ffc8 	bl	8003104 <__swhatbuf_r>
 8003174:	9f00      	ldr	r7, [sp, #0]
 8003176:	4605      	mov	r5, r0
 8003178:	4639      	mov	r1, r7
 800317a:	4630      	mov	r0, r6
 800317c:	f7ff fe8a 	bl	8002e94 <_malloc_r>
 8003180:	b948      	cbnz	r0, 8003196 <__smakebuf_r+0x46>
 8003182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003186:	059a      	lsls	r2, r3, #22
 8003188:	d4ee      	bmi.n	8003168 <__smakebuf_r+0x18>
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	e7e2      	b.n	800315c <__smakebuf_r+0xc>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	6020      	str	r0, [r4, #0]
 800319a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	9b01      	ldr	r3, [sp, #4]
 80031a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80031a6:	b15b      	cbz	r3, 80031c0 <__smakebuf_r+0x70>
 80031a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ac:	4630      	mov	r0, r6
 80031ae:	f000 f81d 	bl	80031ec <_isatty_r>
 80031b2:	b128      	cbz	r0, 80031c0 <__smakebuf_r+0x70>
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	81a3      	strh	r3, [r4, #12]
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	431d      	orrs	r5, r3
 80031c4:	81a5      	strh	r5, [r4, #12]
 80031c6:	e7cf      	b.n	8003168 <__smakebuf_r+0x18>

080031c8 <_fstat_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4d07      	ldr	r5, [pc, #28]	@ (80031e8 <_fstat_r+0x20>)
 80031cc:	2300      	movs	r3, #0
 80031ce:	4604      	mov	r4, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	602b      	str	r3, [r5, #0]
 80031d6:	f7fd fb4a 	bl	800086e <_fstat>
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	d102      	bne.n	80031e4 <_fstat_r+0x1c>
 80031de:	682b      	ldr	r3, [r5, #0]
 80031e0:	b103      	cbz	r3, 80031e4 <_fstat_r+0x1c>
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	bd38      	pop	{r3, r4, r5, pc}
 80031e6:	bf00      	nop
 80031e8:	20012ef8 	.word	0x20012ef8

080031ec <_isatty_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4d06      	ldr	r5, [pc, #24]	@ (8003208 <_isatty_r+0x1c>)
 80031f0:	2300      	movs	r3, #0
 80031f2:	4604      	mov	r4, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	602b      	str	r3, [r5, #0]
 80031f8:	f7fd fb49 	bl	800088e <_isatty>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_isatty_r+0x1a>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	b103      	cbz	r3, 8003206 <_isatty_r+0x1a>
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	20012ef8 	.word	0x20012ef8

0800320c <_sbrk_r>:
 800320c:	b538      	push	{r3, r4, r5, lr}
 800320e:	4d06      	ldr	r5, [pc, #24]	@ (8003228 <_sbrk_r+0x1c>)
 8003210:	2300      	movs	r3, #0
 8003212:	4604      	mov	r4, r0
 8003214:	4608      	mov	r0, r1
 8003216:	602b      	str	r3, [r5, #0]
 8003218:	f000 f808 	bl	800322c <_sbrk>
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d102      	bne.n	8003226 <_sbrk_r+0x1a>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	b103      	cbz	r3, 8003226 <_sbrk_r+0x1a>
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	bd38      	pop	{r3, r4, r5, pc}
 8003228:	20012ef8 	.word	0x20012ef8

0800322c <_sbrk>:
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <_sbrk+0x14>)
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	4603      	mov	r3, r0
 8003232:	b909      	cbnz	r1, 8003238 <_sbrk+0xc>
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <_sbrk+0x18>)
 8003236:	6011      	str	r1, [r2, #0]
 8003238:	6810      	ldr	r0, [r2, #0]
 800323a:	4403      	add	r3, r0
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4770      	bx	lr
 8003240:	20012f08 	.word	0x20012f08
 8003244:	20012f10 	.word	0x20012f10

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
